- name: Set user name
  connection: local
  set_fact:
    ansible_user: "{{ ros_user }}"
- name: Show ansible user
  debug:
    msg: "ansible_user = {{ ansible_user }}"
  when: ansible_user is defined
- name: 'apt update'
  raw: apt update
  changed_when: False
- name: 'apt upgrade (This might take some time ...)'
  shell: NEEDRESTART_MODE=a apt dist-upgrade -y -qq
  changed_when: False
- name: 'Check if reboot is required'
  stat:
    path: /var/run/reboot-required
  register: rebootreq
- name: Rebooting if needed...
  reboot: 
    reboot_timeout: 90
  when: rebootreq.stat.exists == true
- name: 'install python'
  raw: test -e /usr/bin/python || (apt install -y python3-minimal python3-zipstream)
  changed_when: False
- file:
    path: /root/.ssh
    owner: root
    group: root
    state: directory
    mode: 0700
- file:
    path: /root/.ssh/authorized_keys
    owner: root
    group: root
    state: touch
    modification_time: preserve
    access_time: preserve
    mode: 0600
- name: Add keys to authorized_keys for root
  blockinfile:
    insertafter: EOF
    path: /root/.ssh/authorized_keys
    block:  "{{ lookup('template', 'ssh.keys') }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
  ignore_errors: yes
- file:
    path: "~{{ ros_user }}/.ssh"
    owner: "{{ ros_user }}"
    group: "{{ ros_user }}"
    state: directory
    mode: 0700
- file:
    path: "~{{ ros_user }}/.ssh/authorized_keys"
    owner: "{{ ros_user }}"
    group: "{{ ros_user }}"
    state: touch
    modification_time: preserve
    access_time: preserve
    mode: 0600
- name: Add keys to authorized_keys for {{ ros_user }}
  blockinfile:
    insertafter: EOF
    path: "~{{ ros_user }}/.ssh/authorized_keys"
    block:  "{{ lookup('template', 'ssh.keys') }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
  ignore_errors: yes
